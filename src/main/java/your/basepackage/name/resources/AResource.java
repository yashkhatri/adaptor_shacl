/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *	   Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package your.basepackage.name.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;

import your.basepackage.name.servlet.ServletListener;
import your.basepackage.name.SampleAdaptorConstants;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SampleAdaptorConstants.SAMPLEDOMAIN_NAMSPACE)
@OslcName(SampleAdaptorConstants.ARESOURCE)
@OslcResourceShape(title = "AResource Resource Shape", describes = SampleAdaptorConstants.TYPE_ARESOURCE)
public class AResource
    extends AbstractResource
    implements IAResource
{
	// Start of user code attributeAnnotation:aProperty
	// End of user code
	private String aProperty;
	

	// Start of user code classAttributes
	// End of user code

	// Start of user code classMethods
	// End of user code

	public AResource()
	       throws URISyntaxException
	{
	    super();
	
	    // Start of user code constructor1
	    // End of user code
	}
	
	public AResource(final URI about)
	       throws URISyntaxException
	{
	    super(about);
	
	    // Start of user code constructor2
	    // End of user code
	}
	
	public AResource(final String serviceProviderId, final String aResourceId)
	       throws URISyntaxException
	{
	    this (constructURI(serviceProviderId, aResourceId));
	    // Start of user code constructor3
	    // End of user code
	}
	
	public static URI constructURI(final String serviceProviderId, final String aResourceId)
	{
	    String basePath = ServletListener.getServicesBase();
	    Map<String, Object> pathParameters = new HashMap<String, Object>();
	    pathParameters.put("serviceProviderId", serviceProviderId);
	    pathParameters.put("aResourceId", aResourceId);
	    String instanceURI = "serviceProviders/{serviceProviderId}/aResources/{aResourceId}";
	
	    final UriBuilder builder = UriBuilder.fromUri(basePath);
	    return builder.path(instanceURI).buildFromMap(pathParameters);
	}
	
	public static Link constructLink(final String serviceProviderId, final String aResourceId , final String label)
	{
	    return new Link(constructURI(serviceProviderId, aResourceId), label);
	}
	
	public static Link constructLink(final String serviceProviderId, final String aResourceId)
	{
	    return new Link(constructURI(serviceProviderId, aResourceId));
	}
	

	public String toString()
	{
	    return toString(false);
	}
	
	public String toString(boolean asLocalResource)
	{
	    String result = "";
	    // Start of user code toString_init
	    // End of user code
	
	    if (asLocalResource) {
	        result = result + "{a Local AResource Resource} - update AResource.toString() to present resource as desired.";
	        // Start of user code toString_bodyForLocalResource
	        // End of user code
	    }
	    else {
	        result = getAbout().toString();
	    }
	
	    // Start of user code toString_finalize
	    // End of user code
	
	    return result;
	}
	
	public String toHtml()
	{
	    return toHtml(false);
	}
	
	public String toHtml(boolean asLocalResource)
	{
	    String result = "";
	    // Start of user code toHtml_init
	    // End of user code
	
	    if (asLocalResource) {
	        result = toString(true);
	        // Start of user code toHtml_bodyForLocalResource
	        // End of user code
	    }
	    else {
	        result = "<a href=\"" + getAbout() + "\">" + toString() + "</a>";
	    }
	
	    // Start of user code toHtml_finalize
	    // End of user code
	
	    return result;
	}

	

	// Start of user code getterAnnotation:aProperty
	// End of user code
	@OslcName("aProperty")
	@OslcPropertyDefinition(SampleAdaptorConstants.SAMPLEDOMAIN_NAMSPACE + "aProperty")
	@OslcDescription("a Property")
	@OslcOccurs(Occurs.ExactlyOne)
	@OslcValueType(ValueType.String)
	@OslcReadOnly(false)
	@OslcTitle("a Property")
	public String getAProperty()
	{
	    // Start of user code getterInit:aProperty
	    // End of user code
	    return aProperty;
	}
	

	// Start of user code setterAnnotation:aProperty
	// End of user code
	public void setAProperty(final String aProperty )
	{
	    // Start of user code setterInit:aProperty
	    // End of user code
	    this.aProperty = aProperty;
	    // Start of user code setterFinalize:aProperty
	    // End of user code
	}
	

	static public String aPropertyToHtmlForCreation (final HttpServletRequest httpServletRequest)
	{
	    String s = "";
	
	    // Start of user code "Init:aPropertyToHtmlForCreation(...)"
	    // End of user code
	
	    s = s + "<label for=\"aProperty\">aProperty: </LABEL>";
	
	    // Start of user code "Mid:aPropertyToHtmlForCreation(...)"
	    // End of user code
	
	    s= s + "<input name=\"aProperty\" type=\"text\" style=\"width: 400px\" id=\"aProperty\" >";
	    // Start of user code "Finalize:aPropertyToHtmlForCreation(...)"
	    // End of user code
	
	    return s;
	}
	
	
	public String aPropertyToHtml()
	{
	    String s = "";
	
	    // Start of user code aPropertytoHtml_init
	    // End of user code
	
	    s = s + "<label for=\"aProperty\"><strong>aProperty</strong>: </LABEL>";
	
	    // Start of user code aPropertytoHtml_mid
	    // End of user code
	
	    try {
	        if (aProperty == null) {
	            s= s + "<em>null</em>";
	        }
	        else {
	            s= s + aProperty.toString();
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	
	    // Start of user code aPropertytoHtml_finalize
	    // End of user code
	
	    return s;
	}
	
}
